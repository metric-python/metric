import os
import datetime


class PackageFileGenException(OSError):
    def __init__(self, message, errors='File generate error!'):
        super().__init__(message)
        self.errors = errors

    def __str__(self):
        return self.errors


class PackageDirectoryGenException(OSError):
    def __init__(self, message, errors='Directory generate error!'):
        super().__init__(message)
        self.errors = errors

    def __str__(self):
        return self.errors


class Package:
    @staticmethod
    def make_package(path):
        """
        ## Make package

        [ID]
            Make package adalah fungsi untuk membuat package, dengan membuat direktori pertama kali lalu membuat file
            inisiasi python (__init__.py) dengan keterangen waktu dan lokasi.

        @param path: package path location
        """
        Package.make_directory(path)
        Package.make_file(
            os.path.join(path, '__init__.py'),
            f'# PACKAGE {path}, GENERATED BY: METRIC @ {datetime.datetime.now()} \n'
        )

    @staticmethod
    def make_file(file, content=None):
        """
        ## Make file

        [ID]
            Make file adalah fungsi dari kelas "Package" untuk membuat file apapun baik itu "mako", "python", "HTML",
            atau text file biasa.

        @param file: file location to be created
        @param content: the file content
        """
        if content is not None:
            with open(file, 'w') as f:
                try:
                    f.write(content)
                except PackageFileGenException as PFGE:
                    raise PFGE.with_traceback(PFGE.__traceback__)
                else:
                    f.close()
        else:
            raise PackageFileGenException('Content is missing or None')

    @staticmethod
    def make_directory(path):
        """
        ## Make directory

        [ID]
            Fungsi yang bertujuan untuk membuat direktori

        @param path:
        @return:
        """
        if not os.path.exists(path):
            try:
                os.makedirs(path)
            except PackageDirectoryGenException as PDGE:
                raise PDGE.with_traceback(PDGE.__traceback__)
        else:
            raise PackageDirectoryGenException('Directory is already exists')
